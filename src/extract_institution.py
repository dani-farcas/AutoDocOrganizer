import spacy
import re
import json
import os

# üìÇ Datei f√ºr dynamisch gesehene Institutionen
INSTITUTIONS_FILE = os.path.join(os.path.dirname(__file__), "..", "institutions_seen.json")

# üìå Liste fester Institutionen (Whitelist)
KNOWN_INSTITUTIONS = [
    "Bundesagentur f√ºr Arbeit",
    "Jobcenter",
    "Finanzamt",
    "Deutsche Rentenversicherung",
    "AOK", "TK", "Barmer", "IKK", "Krankenkasse",
    "Sparkasse", "Volksbank", "Commerzbank", "Deutsche Bank"
]

# üîë Schl√ºsselw√∂rter f√ºr typische ORGs
ORG_HINTS = [
    "gmbh", "ag", "kg", "se",
    "bank", "sparkasse", "versicherung", "kasse",
    "amt", "ministerium", "beh√∂rde",
    "universit√§t", "hochschule", "institut",
    "rewe", "aldi", "lidl"
]

# üß† spaCy Modell laden
try:
    nlp = spacy.load("de_core_news_md")
except OSError:
    raise RuntimeError("‚ùå spaCy Modell nicht gefunden. Bitte installieren mit:\n"
                       "   python -m spacy download de_core_news_md")


# ============================================================
# üì• Gesehene Institutionen laden/speichern
# ============================================================
def load_institutions():
    if os.path.exists(INSTITUTIONS_FILE):
        with open(INSTITUTIONS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []


def save_institution(name: str):
    data = load_institutions()
    if name not in data:
        data.append(name)
        with open(INSTITUTIONS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)


# ============================================================
# üîé Institution extrahieren
# ============================================================
def extract_institution(text: str) -> str:
    if not text:
        return "_Unklar"

    text_lower = text.lower()

    # 1Ô∏è‚É£ Bekannte Institutionen pr√ºfen
    for inst in KNOWN_INSTITUTIONS:
        if inst.lower() in text_lower:
            return inst

    # 2Ô∏è‚É£ Bereits gesehene Institutionen
    for inst in load_institutions():
        if inst.lower() in text_lower:
            return inst

    # 3Ô∏è‚É£ Mit spaCy NER Institutionen erkennen
    doc = nlp(text)
    orgs = [ent.text.strip() for ent in doc.ents if ent.label_ == "ORG"]

    # üîé Nur sinnvolle ORGs behalten
    filtered = []
    for org in orgs:
        lower = org.lower()
        if len(org) < 3:  # zu kurz
            continue
        if re.match(r"^\d+$", org):  # nur Zahl (z.B. Telefonnummer)
            continue
        if any(hint in lower for hint in ORG_HINTS):
            return org  # sofort zur√ºckgeben, wenn Match mit Schl√ºsselwort
        filtered.append(org)

    # 4Ô∏è‚É£ Wenn keine ORGs ‚Üí Fallback
    if not filtered:
        save_institution("_Unklar")
        return "_Unklar"

    # 5Ô∏è‚É£ L√§ngste ORG zur√ºckgeben (Briefkopf etc.)
    candidate = max(filtered, key=len)
    save_institution(candidate)
    return candidate


# ============================================================
# üß™ Testlauf
# ============================================================
if __name__ == "__main__":
    sample_text = """
    Informationen zur Arbeitsbescheinigung
    Bundesagentur f√ºr Arbeit
    Telefonnummer: 0800 45555 27
    """
    print("‚û°Ô∏è Erkannte Institution:", extract_institution(sample_text))
